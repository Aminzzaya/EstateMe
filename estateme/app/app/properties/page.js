"use client";

import Image from "next/image";
import React, { useState, useEffect } from "react";
import {
  Form,
  Carousel,
  Button,
  Modal,
  Select,
  Spin,
  Table,
  ConfigProvider,
} from "antd";
import { LoadingOutlined } from "@ant-design/icons";
import {
  PencilIcon,
  BellIcon,
  SearchIcon,
  MapIcon,
  PinIcon,
  PropertyIcon,
  UserIcon,
  DateIcon,
  CarIcon,
  GearIcon,
  WalletIcon,
  EyeIcon,
} from "@/components/Icons";
import { useRouter } from "next/navigation";
import Nav from "@/components/Nav";

export default function Dashboard() {
  const { Option } = Select;
  const [form] = Form.useForm();
  const router = useRouter();

  const [loading, setLoading] = useState(false);
  const [selectedProperty, setSelectedProperty] = useState(null);
  const [propertyModalOpen, setPropertyModalOpen] = useState(false);
  const [properties, setProperties] = useState([]);

  useEffect(() => {
    getProperties();
  }, []);

  const getProperties = async () => {
    setLoading(true);
    try {
      const response = await fetch("/api/getProperties");
      if (response.ok) {
        const data = await response.json();
        setProperties(data.properties);
      } else {
        console.error(
          "–ê–ª–¥–∞–∞: “Æ–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª FE:",
          response.statusText
        );
      }
    } catch (error) {
      console.error("–ê–ª–¥–∞–∞: “Æ–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª BE:", error);
    } finally {
      setLoading(false);
    }
  };

  const getNextPropertyId = () => {
    const maxNumber = properties.reduce((max, property) => {
      const number = parseInt(property.propertyId.substring(2), 10);
      return isNaN(number) ? max : Math.max(max, number);
    }, 0);
    const nextNumber = maxNumber + 1;
    return `PR${nextNumber.toString().padStart(4, "0")}`;
  };

  const handleNewProperty = () => {
    const newPropertyId = getNextPropertyId();
    localStorage.setItem("propertyId", newPropertyId);
    router.push("properties/new");
  };

  const getStatusColor = (statusName) => {
    switch (statusName) {
      case "–ë“Ø—Ä—Ç–≥—ç–≥–¥—Å—ç–Ω":
        return "bg-blue-500 text-white px-2 py-1 rounded-xl";
      case "–¢–æ—Ö–∏—Ä–æ–ª—Ü—Å–æ–Ω":
        return "bg-[#7C3AED] text-white px-2 py-1 rounded-xl";
      case "–ì—ç—Ä—ç—ç —Ö–∏–π–≥–¥—ç–∂ –±–∞–π–≥–∞–∞":
        return "bg-[#FDE047] text-black px-2 py-1 rounded-xl text-center";
      case "–•—É–¥–∞–ª–¥—Å–∞–Ω":
        return "bg-[#22C55E] text-white px-2 py-1 rounded-xl";
      case "–Ø–∞—Ä–∞–ª—Ç–∞–π":
        return "bg-[#EA580C] text-white px-2 py-1 rounded-xl";
      case "–¶—É—Ü–∞–ª—Å–∞–Ω":
        return "bg-[#DC2626] text-white px-2 py-1 rounded-xl";
      default:
        return "";
    }
  };

  const columns = [
    {
      title: "“Æ–•–•-–∏–π–Ω –¥—É–≥–∞–∞—Ä",
      dataIndex: "propertyId",
      defaultSortOrder: "descend",
      sorter: (a, b) => {
        const idA = parseInt(a.propertyId.substr(2), 10);
        const idB = parseInt(b.propertyId.substr(2), 10);
        return idA - idB;
      },
    },
    {
      title: "–ë“Ø—Ä—Ç–≥—ç–ª–∏–π–Ω –æ–≥–Ω–æ–æ",
      dataIndex: "createdAt",
      render: (createdAt) => new Date(createdAt).toISOString().split("T")[0],
      sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),
    },
    {
      title: "–ó–æ—Ä–∏–ª–≥–æ",
      dataIndex: "purpose",
      sorter: (a, b) => a.purpose - b.purpose,
    },
    {
      title: "–ë–∞–π—Ä—à–∏–ª",
      dataIndex: "address",
      sorter: (a, b) => b.districtId - a.districtId,
    },
    {
      title: "–¢”©—Ä”©–ª",
      dataIndex: "typeName",
      sorter: (a, b) => a.typeId - b.typeId,
    },
    {
      title: "–ê–≥–µ–Ω—Ç",
      dataIndex: "employee",
      sorter: (a, b) => {
        const idA = parseInt(a.employeeId.substr(1), 10);
        const idB = parseInt(b.employeeId.substr(1), 10);
        return idA - idB;
      },
    },
    {
      title: "“Æ–Ω—ç",
      dataIndex: "totalAvgPrice",
      render: (totalAvgPrice) => (
        <>
          {new Intl.NumberFormat("en-US").format(totalAvgPrice)}
          <span>‚ÇÆ</span>
        </>
      ),
      sorter: (a, b) => a.totalAvgPrice - b.totalAvgPrice,
    },
    {
      title: "–¢”©–ª”©–≤",
      dataIndex: "statusName",
      sorter: (a, b) => a.statusId - b.statusId,
      render: (statusName) => (
        <div className={`status-cell ${getStatusColor(statusName)}`}>
          {statusName}
        </div>
      ),
    },
    {
      title: "",
      render: (property) => (
        <Button
          className="text-[#008cc7]"
          type="link"
          onClick={() => {
            setSelectedProperty(property);
            setPropertyModalOpen(true);
          }}
        >
          <EyeIcon />
        </Button>
      ),
    },
  ];

  const customLocale = {
    triggerAsc: "–ë–∞–≥–∞–∞—Å –∏—Ö —Ä“Ø“Ø –∞–Ω–≥–∏–ª–∞—Ö",
    triggerDesc: "–ò—Ö—ç—ç—Å –±–∞–≥–∞ —Ä—É—É –∞–Ω–≥–∏–ª–∞—Ö",
    cancelSort: "–ê–Ω–≥–∏–ª—Å–Ω—ã–≥ –∞—Ä–∏–ª–≥–∞—Ö",
  };

  const priceFormatter = (value) => {
    if (!value) return "";
    const formattedValue = value
      .toString()
      .replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return `${formattedValue}`;
  };

  return (
    <>
      {loading ? (
        <ConfigProvider
          theme={{
            token: {
              colorBgMask: "transparent",
            },
          }}
        >
          <Spin
            fullscreen
            wrapperClassName="spin"
            indicator={
              <LoadingOutlined
                style={{
                  fontSize: 24,
                }}
                spin
              />
            }
          />
        </ConfigProvider>
      ) : (
        <main className="px-12 py-8">
          <>
            <div className="pt-6 pb-4 flex justify-between">
              <p className="font-semibold text-[15px] text-[#008cc7]">
                –ë“Æ–†–¢–ì–≠–õ
              </p>
              <Nav />
            </div>
            <div>
              <div>
                <Button
                  className="border-[#008cc7] text-[#008cc7]"
                  onClick={handleNewProperty}
                >
                  + “Æ–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥”© –±“Ø—Ä—Ç–≥—ç—Ö
                </Button>
              </div>
            </div>
            <div className="pt-6"></div>
            <Table
              columns={columns}
              locale={customLocale}
              dataSource={properties.map((property, index) => ({
                ...property,
                key: index,
              }))}
            />
          </>
          {propertyModalOpen && selectedProperty && (
            <Modal
              title={`“Æ–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª / ${selectedProperty.propertyId}`}
              open={propertyModalOpen}
              onCancel={() => setPropertyModalOpen(false)}
              width={620}
              footer={null}
              style={{ top: 40, bottom: 30 }}
            >
              <div>
                <div className="pt-2 flex items-center gap-4">
                  <p
                    className={`status-cell ${getStatusColor(
                      selectedProperty.statusName
                    )}`}
                  >
                    {selectedProperty.statusName}
                  </p>
                  <p>üß≥ {selectedProperty.purpose}</p>
                  <div className="flex items-center gap-1 text-gray-600">
                    <UserIcon />
                    <p className="text-black">{selectedProperty.employee}</p>
                  </div>
                </div>
                <div className="pt-5 rounded-xl overflow-hidden">
                  <Carousel autoplay autoplaySpeed={2000}>
                    {selectedProperty.pics.map((pic, index) => (
                      <div key={index}>
                        <img
                          src={pic}
                          alt={`Property Image ${index + 1}`}
                          className="carousel-img"
                        />
                      </div>
                    ))}
                  </Carousel>
                </div>

                <div className="pt-5 gap-3 flex items-center">
                  {selectedProperty.buildingName ? (
                    <>
                      <div className="uppercase font-semibold">
                        {selectedProperty.buildingName},{" "}
                        {selectedProperty.apartmentFloor} –¥–∞–≤—Ö–∞—Ä—Ç
                      </div>
                      <div className="bg-gray-100 px-2 py-1 rounded-xl flex items-center gap-2 text-gray-600">
                        <PropertyIcon />
                        <p className="text-black">
                          {selectedProperty.typeName}
                        </p>
                      </div>
                    </>
                  ) : (
                    <div className="bg-gray-100 px-2 py-1 rounded-xl flex items-center gap-2 text-gray-600">
                      <PropertyIcon />
                      <p className="text-black">{selectedProperty.typeName}</p>
                    </div>
                  )}
                </div>

                <div className="font-semibold py-4 text-[#007cc8]">–ë–∞–π—Ä—à–∏–ª</div>
                <div className="flex gap-4 items-center">
                  <div className="text-gray-600">
                    <MapIcon />
                  </div>
                  <div className="leading-5">
                    <p>{selectedProperty.address}</p>
                    <p>–ó–∏–ø –∫–æ–¥: {selectedProperty.zipCode}</p>
                  </div>
                </div>
                <div className="border-b pt-4 mx-10"></div>
                {selectedProperty.distanceToDowntown && (
                  <div className="pt-4 flex gap-3 items-center">
                    <div className="text-gray-600">
                      <PinIcon />
                    </div>
                    <div className="flex flex-wrap gap-2">
                      <p className="bg-gray-100 px-2 py-1 rounded-xl">
                        –•–æ—Ç—ã–Ω —Ç”©–≤”©”©—Å {selectedProperty.distanceToDowntown} –∫–º
                      </p>
                      {selectedProperty.distanceToSchool && (
                        <p className="bg-gray-100 px-2 py-1 rounded-xl">
                          –û–π—Ä —Å—É—Ä–≥—É—É–ª—å {selectedProperty.distanceToSchool} –∫–º
                        </p>
                      )}
                      {selectedProperty.distanceToUniversity && (
                        <p className="bg-gray-100 px-2 py-1 rounded-xl">
                          –û–π—Ä –∏—Ö —Å—É—Ä–≥—É—É–ª—å{" "}
                          {selectedProperty.distanceToUniversity} –∫–º
                        </p>
                      )}
                      {selectedProperty.distanceToKindergarten && (
                        <p className="bg-gray-100 px-2 py-1 rounded-xl">
                          –û–π—Ä —Ü—ç—Ü—ç—Ä–ª—ç–≥ {selectedProperty.distanceToKindergarten}{" "}
                          –∫–º
                        </p>
                      )}
                    </div>
                  </div>
                )}
                <div className="font-semibold py-4 text-[#007cc8]">
                  “Æ–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª
                </div>
                <div className="flex flex-wrap gap-4 items-start">
                  <div className="text-gray-500">
                    <PropertyIcon />
                  </div>
                  <div className="w-[88%]">
                    {selectedProperty.buildingTotalFloor && (
                      <div className="pt-[2px] flex justify-between pb-[10px]">
                        <p className="w-3/4">
                          {selectedProperty.buildingTotalFloor} –¥–∞–≤—Ö–∞—Ä{" "}
                          {selectedProperty.typeName}
                        </p>
                        <p className="w-1/2 text-start">
                          “Æ–•–•: {selectedProperty.apartmentFloor} –¥–∞–≤—Ö–∞—Ä
                        </p>
                      </div>
                    )}
                    <div className="pt-[2px] flex justify-between">
                      <p className="w-3/4">
                        –¢–∞–ª–±–∞–π: {selectedProperty.baseArea} –º.–∫–≤
                      </p>
                      {selectedProperty.ceilingHeight && (
                        <p className="w-1/2 text-start">
                          –¢–∞–∞–∑–Ω—ã ”©–Ω–¥”©—Ä: {selectedProperty.ceilingHeight} –º
                        </p>
                      )}
                    </div>
                    <div className="border-b pt-4"></div>
                    {selectedProperty.numOfRoom && (
                      <>
                        <div className="flex gap-2 pt-3 -ml-[5px]">
                          <p className="bg-blue-100 px-2 py-1 rounded-xl">
                            {selectedProperty.numOfRoom} ”©—Ä”©”©
                          </p>
                          <p className="bg-gray-100 px-2 py-1 rounded-xl">
                            {selectedProperty.numOfBedroom} —É–Ω—Ç–ª–∞–≥—ã–Ω ”©—Ä”©”©
                          </p>
                          <p className="bg-gray-100 px-2 py-1 rounded-xl">
                            {selectedProperty.numOfBathroom} —É–≥–∞–∞–ª–≥—ã–Ω ”©—Ä”©”©
                          </p>
                        </div>
                      </>
                    )}
                    {selectedProperty.numOfWindow && (
                      <div className="flex gap-2 pt-3 -ml-[5px]">
                        <p className="bg-gray-100 px-2 py-1 rounded-xl">
                          {selectedProperty.numOfWindow} —Ü–æ–Ω—Ö
                        </p>
                        <p className="bg-gray-100 px-2 py-1 rounded-xl">
                          {selectedProperty.numOfEntry} –æ—Ä—Ü
                        </p>
                        <p className="bg-gray-100 px-2 py-1 rounded-xl">
                          {selectedProperty.numOfExit} –≥–∞—Ä—Ü
                        </p>
                      </div>
                    )}
                    <div className="border-b pt-4"></div>
                    {selectedProperty.buildingMaterial && (
                      <p className="pt-3">
                        –ë–∞—Ä–∏–ª–≥—ã–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {selectedProperty.buildingMaterial}
                      </p>
                    )}
                    {selectedProperty.buildingNumOfCCTV && (
                      <p className="pt-3">
                        –ë–∞—Ä–∏–ª–≥—ã–Ω CCTV —Ç–æ–æ: {selectedProperty.buildingNumOfCCTV}
                      </p>
                    )}
                    {selectedProperty.earthquakeResistance && (
                      <p className="pt-3">
                        –ì–∞–∑–∞—Ä —Ö”©–¥–ª”©–ª—Ç–∏–π–Ω —Ç—ç—Å–≤—ç—Ä:{" "}
                        {selectedProperty.earthquakeResistance} –º–∞–≥–Ω–∏—Ç—É–¥
                      </p>
                    )}
                  </div>
                </div>
                {selectedProperty.commencementDate && (
                  <>
                    <div className="border-t mt-4 mx-10"></div>
                    <div className="flex pt-4 items-center gap-[9px]">
                      <div className="text-gray-500 pl-[2px]">
                        <DateIcon />
                      </div>
                      <p className="bg-gray-100 px-2 py-1 rounded-xl">
                        –ë–∞—Ä–∏–≥–¥—Å–∞–Ω:{" "}
                        {selectedProperty.commencementDate.slice(0, 10)}
                      </p>
                      {selectedProperty.launchDate && (
                        <p className="bg-gray-100 px-2 py-1 rounded-xl">
                          –ê—à–∏–≥–ª–∞–ª—Ç–∞–¥ –æ—Ä—Å–æ–Ω:{" "}
                          {selectedProperty.launchDate.slice(0, 10)}
                        </p>
                      )}
                    </div>
                    <div className="border-b pt-4 mx-10"></div>
                  </>
                )}
                {selectedProperty.numOfGarage && (
                  <>
                    <div className="flex pt-4 items-start gap-4 w-[93%]">
                      <div className="text-gray-500">
                        <CarIcon />
                      </div>
                      <p className="w-3/4">
                        –î–æ—Ç–æ—Ä –º–∞—à–∏–Ω –∑–æ–≥—Å–æ–æ–ª—ã–Ω —Ç–æ–æ:{" "}
                        {selectedProperty.numOfGarage}
                      </p>
                      {selectedProperty.garagePrice && (
                        <p className="w-1/2 text-start">
                          “Æ–Ω—ç: {priceFormatter(selectedProperty.garagePrice)}‚ÇÆ
                        </p>
                      )}
                    </div>
                    <div className="border-b pt-4 mx-10"></div>
                  </>
                )}
                <div className="flex pt-4 items-center gap-2 w-[93%]">
                  <div className="text-gray-500">
                    <GearIcon />
                  </div>
                  <div className="w-full flex flex-wrap gap-2 pl-[1px]">
                    <p className="bg-gray-100 px-2 py-1 rounded-xl">
                      –¢”©–≤–∏–π–Ω —à—É–≥–∞–º–¥ —Ö–æ–ª–±–æ–≥–¥—Å–æ–Ω{" "}
                      <span className="pl-1">
                        {selectedProperty.isCentralWaterSupplies ? "‚úîÔ∏è" : "‚ùå"}
                      </span>
                    </p>
                    {selectedProperty.isLobby !== undefined && (
                      <p className="bg-gray-100 px-2 py-1 rounded-xl">
                        –•“Ø–ª—ç—ç–ª–≥–∏–π–Ω —Ç–∞–Ω—Ö–∏–º{" "}
                        <span className="pl-1">
                          {selectedProperty.isLobby ? "‚úîÔ∏è" : "‚ùå"}
                        </span>
                      </p>
                    )}
                    <p className="bg-gray-100 px-2 py-1 rounded-xl">
                      –ù—ç–º—ç–ª—Ç —Ü–∞—Ö–∏–ª–≥–∞–∞–Ω—ã “Ø“Ø—Å–≤—ç—Ä{" "}
                      <span className="pl-1">
                        {selectedProperty.isAdditionalPowerSupplies
                          ? "‚úîÔ∏è"
                          : "‚ùå"}
                      </span>
                    </p>
                    {selectedProperty.isEmergencyExit !== undefined && (
                      <>
                        <p className="bg-gray-100 px-2 py-1 rounded-xl">
                          –ê–≤–∞–∞—Ä—ã–Ω –≥–∞—Ä—Ü{" "}
                          <span className="pl-1">
                            {selectedProperty.isEmergencyExit ? "‚úîÔ∏è" : "‚ùå"}
                          </span>
                        </p>
                        <p className="bg-gray-100 px-2 py-1 rounded-xl">
                          –ì–∞–¥–Ω–∞ –º–∞—à–∏–Ω—ã –∑–æ–≥—Å–æ–æ–ª{" "}
                          <span className="pl-1">
                            {selectedProperty.isParkingLot ? "‚úîÔ∏è" : "‚ùå"}
                          </span>
                        </p>
                      </>
                    )}
                  </div>
                </div>
                <div className="font-semibold py-4 text-[#007cc8]">
                  “Æ–Ω–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª
                </div>
                <div className="flex flex-wrap gap-4 items-start pb-4">
                  <div className="text-gray-500">
                    <WalletIcon />
                  </div>
                  <div className="w-[92%]">
                    <Table
                      rowClassName={(record, index) =>
                        index === 0 ? "bg-blue-100" : ""
                      }
                      dataSource={[
                        {
                          key: "1",
                          name: "–î—É–Ω–¥–∞–∂ “Ø–Ω—ç",
                          perSquareMeter:
                            new Intl.NumberFormat("en-US").format(
                              selectedProperty.unitAvgPrice
                            ) + "‚ÇÆ",
                          total:
                            new Intl.NumberFormat("en-US").format(
                              selectedProperty.totalAvgPrice
                            ) + "‚ÇÆ",
                        },
                        {
                          key: "2",
                          name: "–î—ç—ç–¥ “Ø–Ω—ç",
                          perSquareMeter:
                            new Intl.NumberFormat("en-US").format(
                              selectedProperty.unitMaxPrice
                            ) + "‚ÇÆ",
                          total:
                            new Intl.NumberFormat("en-US").format(
                              selectedProperty.totalMaxPrice
                            ) + "‚ÇÆ",
                        },
                        {
                          key: "3",
                          name: "–î–æ–æ–¥ “Ø–Ω—ç",
                          perSquareMeter:
                            new Intl.NumberFormat("en-US").format(
                              selectedProperty.unitMinPrice
                            ) + "‚ÇÆ",
                          total:
                            new Intl.NumberFormat("en-US").format(
                              selectedProperty.totalMinPrice
                            ) + "‚ÇÆ",
                        },
                      ]}
                      columns={[
                        {
                          title: "“Æ–Ω—ç",
                          dataIndex: "name",
                        },
                        {
                          title: "1 –º.–∫–≤",
                          dataIndex: "perSquareMeter",
                        },
                        {
                          title: "–ù–∏–π—Ç",
                          dataIndex: "total",
                        },
                      ]}
                      pagination={false}
                    />
                  </div>
                </div>
              </div>
            </Modal>
          )}
        </main>
      )}
    </>
  );
}
